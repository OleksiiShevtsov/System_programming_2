// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5finfo_2eproto;
class Diploma;
class DiplomaDefaultTypeInternal;
extern DiplomaDefaultTypeInternal _Diploma_default_instance_;
class Notebook;
class NotebookDefaultTypeInternal;
extern NotebookDefaultTypeInternal _Notebook_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Diploma* Arena::CreateMaybeMessage<::Diploma>(Arena*);
template<> ::Notebook* Arena::CreateMaybeMessage<::Notebook>(Arena*);
template<> ::UserInfo* Arena::CreateMaybeMessage<::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Diploma_Degree : int {
  Diploma_Degree_WRONG_TYPE = 0,
  Diploma_Degree_BACHELOR = 1,
  Diploma_Degree_MASTER = 2,
  Diploma_Degree_Diploma_Degree_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Diploma_Degree_Diploma_Degree_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Diploma_Degree_IsValid(int value);
constexpr Diploma_Degree Diploma_Degree_Degree_MIN = Diploma_Degree_WRONG_TYPE;
constexpr Diploma_Degree Diploma_Degree_Degree_MAX = Diploma_Degree_MASTER;
constexpr int Diploma_Degree_Degree_ARRAYSIZE = Diploma_Degree_Degree_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Diploma_Degree_descriptor();
template<typename T>
inline const std::string& Diploma_Degree_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Diploma_Degree>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Diploma_Degree_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Diploma_Degree_descriptor(), enum_t_value);
}
inline bool Diploma_Degree_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Diploma_Degree* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Diploma_Degree>(
    Diploma_Degree_descriptor(), name, value);
}
// ===================================================================

class Diploma PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Diploma) */ {
 public:
  inline Diploma() : Diploma(nullptr) {}
  virtual ~Diploma();

  Diploma(const Diploma& from);
  Diploma(Diploma&& from) noexcept
    : Diploma() {
    *this = ::std::move(from);
  }

  inline Diploma& operator=(const Diploma& from) {
    CopyFrom(from);
    return *this;
  }
  inline Diploma& operator=(Diploma&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Diploma& default_instance();

  static inline const Diploma* internal_default_instance() {
    return reinterpret_cast<const Diploma*>(
               &_Diploma_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Diploma& a, Diploma& b) {
    a.Swap(&b);
  }
  inline void Swap(Diploma* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Diploma* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Diploma* New() const final {
    return CreateMaybeMessage<Diploma>(nullptr);
  }

  Diploma* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Diploma>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Diploma& from);
  void MergeFrom(const Diploma& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Diploma* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Diploma";
  }
  protected:
  explicit Diploma(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_5finfo_2eproto);
    return ::descriptor_table_user_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Diploma_Degree Degree;
  static constexpr Degree WRONG_TYPE =
    Diploma_Degree_WRONG_TYPE;
  static constexpr Degree BACHELOR =
    Diploma_Degree_BACHELOR;
  static constexpr Degree MASTER =
    Diploma_Degree_MASTER;
  static inline bool Degree_IsValid(int value) {
    return Diploma_Degree_IsValid(value);
  }
  static constexpr Degree Degree_MIN =
    Diploma_Degree_Degree_MIN;
  static constexpr Degree Degree_MAX =
    Diploma_Degree_Degree_MAX;
  static constexpr int Degree_ARRAYSIZE =
    Diploma_Degree_Degree_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Degree_descriptor() {
    return Diploma_Degree_descriptor();
  }
  template<typename T>
  static inline const std::string& Degree_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Degree>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Degree_Name.");
    return Diploma_Degree_Name(enum_t_value);
  }
  static inline bool Degree_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Degree* value) {
    return Diploma_Degree_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSpecializationFieldNumber = 1,
    kDegreeFieldNumber = 2,
  };
  // string specialization = 1;
  void clear_specialization();
  const std::string& specialization() const;
  void set_specialization(const std::string& value);
  void set_specialization(std::string&& value);
  void set_specialization(const char* value);
  void set_specialization(const char* value, size_t size);
  std::string* mutable_specialization();
  std::string* release_specialization();
  void set_allocated_specialization(std::string* specialization);
  private:
  const std::string& _internal_specialization() const;
  void _internal_set_specialization(const std::string& value);
  std::string* _internal_mutable_specialization();
  public:

  // .Diploma.Degree degree = 2;
  void clear_degree();
  ::Diploma_Degree degree() const;
  void set_degree(::Diploma_Degree value);
  private:
  ::Diploma_Degree _internal_degree() const;
  void _internal_set_degree(::Diploma_Degree value);
  public:

  // @@protoc_insertion_point(class_scope:Diploma)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specialization_;
  int degree_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5finfo_2eproto;
};
// -------------------------------------------------------------------

class Notebook PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Notebook) */ {
 public:
  inline Notebook() : Notebook(nullptr) {}
  virtual ~Notebook();

  Notebook(const Notebook& from);
  Notebook(Notebook&& from) noexcept
    : Notebook() {
    *this = ::std::move(from);
  }

  inline Notebook& operator=(const Notebook& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notebook& operator=(Notebook&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notebook& default_instance();

  static inline const Notebook* internal_default_instance() {
    return reinterpret_cast<const Notebook*>(
               &_Notebook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Notebook& a, Notebook& b) {
    a.Swap(&b);
  }
  inline void Swap(Notebook* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notebook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notebook* New() const final {
    return CreateMaybeMessage<Notebook>(nullptr);
  }

  Notebook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notebook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notebook& from);
  void MergeFrom(const Notebook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notebook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Notebook";
  }
  protected:
  explicit Notebook(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_5finfo_2eproto);
    return ::descriptor_table_user_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // uint32 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Notebook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5finfo_2eproto;
};
// -------------------------------------------------------------------

class UserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_5finfo_2eproto);
    return ::descriptor_table_user_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotebookFieldNumber = 4,
    kNameFieldNumber = 1,
    kDiplomaFieldNumber = 3,
    kAgeFieldNumber = 2,
  };
  // repeated .Notebook notebook = 4;
  int notebook_size() const;
  private:
  int _internal_notebook_size() const;
  public:
  void clear_notebook();
  ::Notebook* mutable_notebook(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Notebook >*
      mutable_notebook();
  private:
  const ::Notebook& _internal_notebook(int index) const;
  ::Notebook* _internal_add_notebook();
  public:
  const ::Notebook& notebook(int index) const;
  ::Notebook* add_notebook();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Notebook >&
      notebook() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Diploma diploma = 3;
  bool has_diploma() const;
  private:
  bool _internal_has_diploma() const;
  public:
  void clear_diploma();
  const ::Diploma& diploma() const;
  ::Diploma* release_diploma();
  ::Diploma* mutable_diploma();
  void set_allocated_diploma(::Diploma* diploma);
  private:
  const ::Diploma& _internal_diploma() const;
  ::Diploma* _internal_mutable_diploma();
  public:
  void unsafe_arena_set_allocated_diploma(
      ::Diploma* diploma);
  ::Diploma* unsafe_arena_release_diploma();

  // uint32 age = 2;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::uint32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Notebook > notebook_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Diploma* diploma_;
  ::PROTOBUF_NAMESPACE_ID::uint32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Diploma

// string specialization = 1;
inline void Diploma::clear_specialization() {
  specialization_.ClearToEmpty();
}
inline const std::string& Diploma::specialization() const {
  // @@protoc_insertion_point(field_get:Diploma.specialization)
  return _internal_specialization();
}
inline void Diploma::set_specialization(const std::string& value) {
  _internal_set_specialization(value);
  // @@protoc_insertion_point(field_set:Diploma.specialization)
}
inline std::string* Diploma::mutable_specialization() {
  // @@protoc_insertion_point(field_mutable:Diploma.specialization)
  return _internal_mutable_specialization();
}
inline const std::string& Diploma::_internal_specialization() const {
  return specialization_.Get();
}
inline void Diploma::_internal_set_specialization(const std::string& value) {
  
  specialization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Diploma::set_specialization(std::string&& value) {
  
  specialization_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Diploma.specialization)
}
inline void Diploma::set_specialization(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  specialization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Diploma.specialization)
}
inline void Diploma::set_specialization(const char* value,
    size_t size) {
  
  specialization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Diploma.specialization)
}
inline std::string* Diploma::_internal_mutable_specialization() {
  
  return specialization_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Diploma::release_specialization() {
  // @@protoc_insertion_point(field_release:Diploma.specialization)
  return specialization_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Diploma::set_allocated_specialization(std::string* specialization) {
  if (specialization != nullptr) {
    
  } else {
    
  }
  specialization_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), specialization,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Diploma.specialization)
}

// .Diploma.Degree degree = 2;
inline void Diploma::clear_degree() {
  degree_ = 0;
}
inline ::Diploma_Degree Diploma::_internal_degree() const {
  return static_cast< ::Diploma_Degree >(degree_);
}
inline ::Diploma_Degree Diploma::degree() const {
  // @@protoc_insertion_point(field_get:Diploma.degree)
  return _internal_degree();
}
inline void Diploma::_internal_set_degree(::Diploma_Degree value) {
  
  degree_ = value;
}
inline void Diploma::set_degree(::Diploma_Degree value) {
  _internal_set_degree(value);
  // @@protoc_insertion_point(field_set:Diploma.degree)
}

// -------------------------------------------------------------------

// Notebook

// uint32 size = 1;
inline void Notebook::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Notebook::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Notebook::size() const {
  // @@protoc_insertion_point(field_get:Notebook.size)
  return _internal_size();
}
inline void Notebook::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void Notebook::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Notebook.size)
}

// -------------------------------------------------------------------

// UserInfo

// string name = 1;
inline void UserInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:UserInfo.name)
  return _internal_name();
}
inline void UserInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:UserInfo.name)
}
inline std::string* UserInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:UserInfo.name)
  return _internal_mutable_name();
}
inline const std::string& UserInfo::_internal_name() const {
  return name_.Get();
}
inline void UserInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.name)
}
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UserInfo.name)
}
inline void UserInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserInfo.name)
}
inline std::string* UserInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:UserInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserInfo.name)
}

// uint32 age = 2;
inline void UserInfo::clear_age() {
  age_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::age() const {
  // @@protoc_insertion_point(field_get:UserInfo.age)
  return _internal_age();
}
inline void UserInfo::_internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  age_ = value;
}
inline void UserInfo::set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:UserInfo.age)
}

// .Diploma diploma = 3;
inline bool UserInfo::_internal_has_diploma() const {
  return this != internal_default_instance() && diploma_ != nullptr;
}
inline bool UserInfo::has_diploma() const {
  return _internal_has_diploma();
}
inline void UserInfo::clear_diploma() {
  if (GetArena() == nullptr && diploma_ != nullptr) {
    delete diploma_;
  }
  diploma_ = nullptr;
}
inline const ::Diploma& UserInfo::_internal_diploma() const {
  const ::Diploma* p = diploma_;
  return p != nullptr ? *p : reinterpret_cast<const ::Diploma&>(
      ::_Diploma_default_instance_);
}
inline const ::Diploma& UserInfo::diploma() const {
  // @@protoc_insertion_point(field_get:UserInfo.diploma)
  return _internal_diploma();
}
inline void UserInfo::unsafe_arena_set_allocated_diploma(
    ::Diploma* diploma) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diploma_);
  }
  diploma_ = diploma;
  if (diploma) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserInfo.diploma)
}
inline ::Diploma* UserInfo::release_diploma() {
  
  ::Diploma* temp = diploma_;
  diploma_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Diploma* UserInfo::unsafe_arena_release_diploma() {
  // @@protoc_insertion_point(field_release:UserInfo.diploma)
  
  ::Diploma* temp = diploma_;
  diploma_ = nullptr;
  return temp;
}
inline ::Diploma* UserInfo::_internal_mutable_diploma() {
  
  if (diploma_ == nullptr) {
    auto* p = CreateMaybeMessage<::Diploma>(GetArena());
    diploma_ = p;
  }
  return diploma_;
}
inline ::Diploma* UserInfo::mutable_diploma() {
  // @@protoc_insertion_point(field_mutable:UserInfo.diploma)
  return _internal_mutable_diploma();
}
inline void UserInfo::set_allocated_diploma(::Diploma* diploma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete diploma_;
  }
  if (diploma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(diploma);
    if (message_arena != submessage_arena) {
      diploma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diploma, submessage_arena);
    }
    
  } else {
    
  }
  diploma_ = diploma;
  // @@protoc_insertion_point(field_set_allocated:UserInfo.diploma)
}

// repeated .Notebook notebook = 4;
inline int UserInfo::_internal_notebook_size() const {
  return notebook_.size();
}
inline int UserInfo::notebook_size() const {
  return _internal_notebook_size();
}
inline void UserInfo::clear_notebook() {
  notebook_.Clear();
}
inline ::Notebook* UserInfo::mutable_notebook(int index) {
  // @@protoc_insertion_point(field_mutable:UserInfo.notebook)
  return notebook_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Notebook >*
UserInfo::mutable_notebook() {
  // @@protoc_insertion_point(field_mutable_list:UserInfo.notebook)
  return &notebook_;
}
inline const ::Notebook& UserInfo::_internal_notebook(int index) const {
  return notebook_.Get(index);
}
inline const ::Notebook& UserInfo::notebook(int index) const {
  // @@protoc_insertion_point(field_get:UserInfo.notebook)
  return _internal_notebook(index);
}
inline ::Notebook* UserInfo::_internal_add_notebook() {
  return notebook_.Add();
}
inline ::Notebook* UserInfo::add_notebook() {
  // @@protoc_insertion_point(field_add:UserInfo.notebook)
  return _internal_add_notebook();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Notebook >&
UserInfo::notebook() const {
  // @@protoc_insertion_point(field_list:UserInfo.notebook)
  return notebook_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Diploma_Degree> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diploma_Degree>() {
  return ::Diploma_Degree_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5finfo_2eproto
